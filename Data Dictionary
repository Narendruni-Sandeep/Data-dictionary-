import java.awt.*;
import java.awt.event.*;
import java.sql.*;
import java.util.Properties;

public class DatabaseSchemaGui extends Frame {

    private Choice tablesChoice = new Choice();
    private Choice columnsChoice = new Choice();
    private List serialNoList = new List();
    private List columnList = new List();
    private List constraintsList = new List();
    private Connection connection;

    public DatabaseSchemaGui() {
        initializeGUI();
        initializeDBConnection();
    }

    private void initializeGUI() {
        setLayout(new BorderLayout(5, 5));

        Panel choicesPanel = new Panel(new GridLayout(1, 2, 5, 5));
        choicesPanel.add(new Label("Tables:"));
        choicesPanel.add(tablesChoice);
        choicesPanel.add(new Label("Columns:"));
        choicesPanel.add(columnsChoice);

        Panel tablePanel = new Panel(new GridLayout(1, 3, 5, 5));
        tablePanel.add(new Label("S.No"));
        tablePanel.add(new Label("Column"));
        tablePanel.add(new Label("Constraints"));

        Panel listsPanel = new Panel(new GridLayout(1, 3, 5, 5));
        listsPanel.add(serialNoList);
        listsPanel.add(columnList);
        listsPanel.add(constraintsList);

        add(choicesPanel, BorderLayout.NORTH);
        add(tablePanel, BorderLayout.CENTER);
        add(listsPanel, BorderLayout.SOUTH);

        setSize(800, 600);
        setVisible(true);

        addWindowListener(new WindowAdapter() {
            public void windowClosing(WindowEvent we) {
                closeDatabaseConnection();
                dispose();
            }
        });
    }

    private void initializeDBConnection() {
        try {
            String dbURL = "jdbc:postgresql://192.168.110.48/training";
            Properties props = new Properties();
            props.setProperty("user", "plf_training_admin");
            props.setProperty("password", "pff123");
            connection = DriverManager.getConnection(dbURL, props);
            populateTablesDropdown();
        } catch (SQLException e) {
            e.printStackTrace();
            System.exit(1);
        }
    }

    private void populateTablesDropdown() {
        try {
            DatabaseMetaData metaData = connection.getMetaData();
            try (ResultSet rs = metaData.getTables(null, null, "%", new String[]{"TABLE"})) {
                while (rs.next()) {
                    tablesChoice.add(rs.getString("TABLE_NAME"));
                }
            }
            tablesChoice.addItemListener(this::updateColumnsDropdown);
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    private void updateColumnsDropdown(ItemEvent e) {
        columnsChoice.removeAll();
        columnList.removeAll();
        constraintsList.removeAll();
        serialNoList.removeAll();

        String selectedTable = tablesChoice.getSelectedItem();
        try {
            DatabaseMetaData metaData = connection.getMetaData();
            try (ResultSet rs = metaData.getColumns(null, null, selectedTable, null)) {
                int serialNo = 1;
                while (rs.next()) {
                    String columnName = rs.getString("COLUMN_NAME");
                    columnsChoice.add(columnName);
                    columnList.add(columnName);
                    serialNoList.add(Integer.toString(serialNo++));
                    // Placeholder for constraints. You will need to update this part to query constraints.
                    constraintsList.add("Constraints here"); // Update this line to add actual constraints.
                }
            }
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
    }

    private void closeDatabaseConnection() {
        try {
            if (connection != null) connection.close();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    public static void main(String[] args) {
        new DatabaseSchemaGui();
    }
}
