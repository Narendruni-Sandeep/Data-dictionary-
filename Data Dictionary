import java.awt.*;
import java.awt.event.*;
import java.sql.*;
import java.util.HashMap;
import java.util.Map;
import java.util.Properties;

public class DatabaseSchemaGui extends Frame {

    private Choice tablesChoice = new Choice();
    private Choice columnsChoice = new Choice();
    private List serialNoList = new List();
    private List columnList = new List();
    private List constraintsList = new List();
    private Connection connection;

    public DatabaseSchemaGui() {
        initializeGUI();
        initializeDBConnection();
    }

    private void initializeGUI() {
        setLayout(new BorderLayout(5, 5));

        Panel choicesPanel = new Panel(new FlowLayout());
        choicesPanel.add(new Label("Tables:"));
        choicesPanel.add(tablesChoice);
        choicesPanel.add(new Label("Columns:"));
        choicesPanel.add(columnsChoice);

        Panel listsPanel = new Panel(new GridLayout(1, 3));
        listsPanel.add(serialNoList);
        listsPanel.add(columnList);
        listsPanel.add(constraintsList);

        add(choicesPanel, BorderLayout.NORTH);
        add(listsPanel, BorderLayout.CENTER);

        setSize(800, 400);
        setVisible(true);

        addWindowListener(new WindowAdapter() {
            public void windowClosing(WindowEvent we) {
                closeDatabaseConnection();
                dispose();
            }
        });
    }

    private void initializeDBConnection() {
        try {
            String dbURL = "jdbc:postgresql://192.168.110.48/training";
            Properties props = new Properties();
            props.setProperty("user", "plf_training_admin");
            props.setProperty("password", "pff123");
            connection = DriverManager.getConnection(dbURL, props);
            populateTablesDropdown();
        } catch (SQLException e) {
            e.printStackTrace();
            System.exit(1);
        }
    }

    private void populateTablesDropdown() {
        try {
            DatabaseMetaData metaData = connection.getMetaData();
            ResultSet rs = metaData.getTables(null, null, "%", new String[]{"TABLE"});
            while (rs.next()) {
                tablesChoice.add(rs.getString("TABLE_NAME"));
            }
            rs.close();

            tablesChoice.addItemListener(e -> updateColumnsDropdown());
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    private void updateColumnsDropdown() {
        columnsChoice.removeAll();
        serialNoList.removeAll();
        columnList.removeAll();
        constraintsList.removeAll();

        String selectedTable = tablesChoice.getSelectedItem();
        updateColumnsAndConstraints(selectedTable);
    }

    private void updateColumnsAndConstraints(String selectedTable) {
        try {
            DatabaseMetaData metaData = connection.getMetaData();

            // Retrieving primary keys
            Map<String, String> primaryKeys = new HashMap<>();
            try (ResultSet pkResultSet = metaData.getPrimaryKeys(null, null, selectedTable)) {
                while (pkResultSet.next()) {
                    String columnName = pkResultSet.getString("COLUMN_NAME");
                    primaryKeys.put(columnName, "PK");
                }
            }

            // Retrieving foreign keys
            Map<String, String> foreignKeys = new HashMap<>();
            try (ResultSet fkResultSet = metaData.getImportedKeys(null, null, selectedTable)) {
                while (fkResultSet.next()) {
                    String fkColumnName = fkResultSet.getString("FKCOLUMN_NAME");
                    String pkTableName = fkResultSet.getString("PKTABLE_NAME");
                    foreignKeys.put(fkColumnName, "FK to " + pkTableName);
                }
            }

            // Displaying columns and their constraints
            try (ResultSet rs = metaData.getColumns(null, null, selectedTable, null)) {
                int serialNo = 1;
                while (rs.next()) {
                    String columnName = rs.getString("COLUMN_NAME");
                    columnsChoice.add(columnName);
                    serialNoList.add(Integer.toString(serialNo++));
                    columnList.add(columnName);
                    
                    // Construct constraint info
                    String constraintInfo = "";
                    if (primaryKeys.containsKey(columnName)) {
                        constraintInfo += primaryKeys.get(columnName);
                    }
                    if (foreignKeys.containsKey(columnName)) {
                        constraintInfo += (!constraintInfo.isEmpty() ? ", " : "") + foreignKeys.get(columnName);
                    }

                    constraintsList.add(constraintInfo.isEmpty() ? "No Constraints" : constraintInfo);
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    private void closeDatabaseConnection() {
        try {
            if (connection != null && !connection.isClosed()) {
                connection.close();
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    public static void main(String[] args) {
        new DatabaseSchemaGui();
    }
}
