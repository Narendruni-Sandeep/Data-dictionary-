import java.awt.*;
import java.awt.event.*;
import java.sql.*;

public class DatabaseSchemaGui extends Frame {

    private Choice tablesChoice = new Choice();
    private Choice columnsChoice = new Choice();
    private List columnsList = new List();
    private List constraintsList = new List();
    private Connection connection;

    public DatabaseSchemaGui() {
        // Setup layout
        setLayout(new BorderLayout());
        Panel choicesPanel = new Panel(new GridLayout(1, 2));
        Panel listsPanel = new Panel(new GridLayout(1, 2));

        // Top panels for Tables and Columns dropdowns
        Panel tablesPanel = new Panel();
        tablesPanel.add(new Label("Tables:"));
        tablesPanel.add(tablesChoice);
        choicesPanel.add(tablesPanel);

        Panel columnsPanel = new Panel();
        columnsPanel.add(new Label("Columns:"));
        columnsPanel.add(columnsChoice);
        choicesPanel.add(columnsPanel);

        // Lists for Columns and Constraints
        listsPanel.add(columnsList);
        listsPanel.add(constraintsList);

        // Add panels to the main frame
        add(choicesPanel, BorderLayout.NORTH);
        add(listsPanel, BorderLayout.CENTER);

        // Initialize database connection
        initializeDBConnection();

        // Register item listeners
        tablesChoice.addItemListener(e -> updateColumnsDropdown());
        columnsChoice.addItemListener(e -> updateConstraintsList());

        // Window closing handler
        addWindowListener(new WindowAdapter() {
            public void windowClosing(WindowEvent we) {
                closeDatabaseConnection();
                dispose();
            }
        });

        // Set window properties
        setTitle("Database Schema Viewer");
        setSize(600, 400);
        setVisible(true);
    }

    private void initializeDBConnection() {
        try {
            String dbURL = "jdbc:postgresql://192.168.110.48/training";
            Properties props = new Properties();
            props.setProperty("user", "plf_training_admin");
            props.setProperty("password", "pff123");
            connection = DriverManager.getConnection(dbURL, props);
            populateTablesDropdown();
        } catch (SQLException e) {
            e.printStackTrace();
            System.exit(1); // Exit or handle error appropriately
        }
    }

    private void populateTablesDropdown() {
        try {
            DatabaseMetaData metaData = connection.getMetaData();
            ResultSet rs = metaData.getTables(null, null, "%", new String[]{"TABLE"});
            while (rs.next()) {
                tablesChoice.add(rs.getString("TABLE_NAME"));
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    private void updateColumnsDropdown() {
        columnsChoice.removeAll();
        String selectedTable = tablesChoice.getSelectedItem();
        try {
            DatabaseMetaData metaData = connection.getMetaData();
            ResultSet rs = metaData.getColumns(null, null, selectedTable, null);
            while (rs.next()) {
                columnsChoice.add(rs.getString("COLUMN_NAME"));
            }
            updateColumnsList(); // Update the columns list as well
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    private void updateColumnsList() {
        columnsList.removeAll();
        String selectedTable = tablesChoice.getSelectedItem();
        try {
            DatabaseMetaData metaData = connection.getMetaData();
            ResultSet rs = metaData.getColumns(null, null, selectedTable, null);
            while (rs.next()) {
                columnsList.add(rs.getString("COLUMN_NAME"));
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    private void updateConstraintsList() {
        constraintsList.removeAll();
        String selectedTable = tablesChoice.getSelectedItem();
        String selectedColumn = columnsChoice.getSelectedItem();
        try {
            DatabaseMetaData metaData = connection.getMetaData();
            ResultSet rs;

            // Check for primary keys
            rs = metaData.getPrimaryKeys(null, null, selectedTable);
            while (rs.next()) {
                if (rs.getString("COLUMN_NAME").equals(selectedColumn)) {
                    constraintsList.add("Primary Key");
                    break; // Assuming only one primary key
                }
            }

            // Check for foreign keys
            rs = metaData.getImportedKeys(null, null, selectedTable);
            while (rs.next()) {
                if (rs.getString("FKCOLUMN_NAME").equals(selectedColumn)) {
                    constraintsList.add("Foreign Key to table " + rs.getString("PKTABLE_NAME"));
                }
            }
            // ...continuing updateConstraintsList

            // Since JDBC does not provide a direct way to get UNIQUE and CHECK constraints,
            // you might need to use a SQL query specific to PostgreSQL, for example:
            String query = "SELECT conname, contype FROM pg_constraint "
                    + "WHERE conrelid = (SELECT oid FROM pg_class WHERE relname = ?) "
                    + "AND conkey = ANY (SELECT indkey FROM pg_index WHERE indrelid = conrelid AND indisunique IS TRUE)";

            PreparedStatement pstmt = connection.prepareStatement(query);
            pstmt.setString(1, selectedTable);
            ResultSet constraints = pstmt.executeQuery();
            while (constraints.next()) {
                String constraintName = constraints.getString("conname");
                String constraintType = constraints.getString("contype");

                if ("p".equals(constraintType) && !constraintsList.getItems().contains("Primary Key")) {
                    constraintsList.add("Primary Key - " + constraintName);
                } else if ("u".equals(constraintType)) {
                    constraintsList.add("Unique - " + constraintName);
                } else if ("c".equals(constraintType)) {
                    constraintsList.add("Check - " + constraintName);
                } // For foreign keys, we already covered above
            }
            constraints.close();
            pstmt.close();

        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    private void closeDatabaseConnection() {
        try {
            if (connection != null && !connection.isClosed()) {
                connection.close();
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    public static void main(String[] args) {
        new DatabaseSchemaGui(); // Create the GUI
    }
}


